---
- name: locale
  hosts: all

  vars:
    # Use `locale -a` format.
    locales:
      - C
      - C.utf8
      - en_US.utf8
      - ru_RU.utf8
    system:
      LANG: C.utf8
      LC_MESSAGES: C.utf8

  tasks:

    # Formats of `locale -a` and `/etc/locale.(conf|gen)` are differ.
    # Usually there is no compatibility issues, but I prefer to follow the
    # traditional naming conventions.
    #
    # If the `system.<LC>` is in the format of `locale -a`, it will be
    # converted to the format of a config file:
    # the ".uft<n>" suffix will be replaced with the ".UTF-<n>".
  - name: ⚙ system
    set_fact:
      system: >
        {{
          system | combine(
            {item.key: item.value | regex_replace('\.utf(\d+)$', '.UTF-\1')},
            recursive=True
          )
        }}
    loop: "{{ system | dict2items }}"

    # And here we do reverse convertation to ensure the locale for the system
    # locale defaults will be generated before, using the required `locales`.
  - name: ∎⚙ system
    set_fact:
      is_system_valid: >
        {{
          (
            system
            | dict2items
            | map(attribute='value')
            | map('regex_replace', '\.UTF-(\d+)$', '.utf\1')
            | unique
          ) is subset(locales)
        }}
  - fail:
    when: not is_system_valid

  - name: ⍰ available locales
    shell:
      cmd: "locale -a"
    register: available_locales
    changed_when: false

  - name: ⛁ available locales
    set_fact:
      available_locales: "{{ available_locales.stdout_lines }}"

  - name: ⌽ missing locales
    set_fact:
      missing_locales: >
        {{
          available_locales
          | intersect(locales)
          | symmetric_difference(locales)
        }}

    # TODO: generate locales
    #   Uncomment `/etc/locale.gen`
    #   Run `locale-gen`

    # Editing the `/etc/locale.conf` directly instead of using the `localectl`
    # is more general.
  - name: Set locale system defaults
    lineinfile:
      path: /etc/locale.conf
      regexp: "^\\s*({{ item.key }}=).*"
      line: "{{ item.key }}={{ item.value }}"
      validate: >
        '{{ uws }}/validator/conf-uniq.sh'
        '{{ item.key }}={{ item.value }}'
        '%s'
    loop: "{{ system | dict2items }}"
    become: true

  - name: ⍰ extra tasks
    stat:
      path: "{{ playbook_dir }}/locale/{{ item }}.yml"
    register: stats
    loop: "{{ locales }}"

  - name: ⌽ existing extra tasks
    set_fact:
      extra_tasks: >
        {{
          stats.results
          | selectattr('stat.exists', 'equalto', true)
          | map(attribute='stat.path')
        }}

  - name: Extra locale config
    include_tasks: "{{ item }}"
    loop: "{{ extra_tasks }}"
